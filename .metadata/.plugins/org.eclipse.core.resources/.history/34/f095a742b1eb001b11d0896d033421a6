package com.bridgelabz.lms.service;

import java.time.LocalDateTime;
import java.util.Optional;

import org.modelmapper.ModelMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;

import com.bridgelabz.lms.dto.ResponseDTO;
import com.bridgelabz.lms.dto.UserDTO;
import com.bridgelabz.lms.exception.InvalidDetailsException;
import com.bridgelabz.lms.model.Candidate;
import com.bridgelabz.lms.repository.CandidateRepository;
import com.bridgelabz.lms.util.Jms;
import com.bridgelabz.lms.util.JwtOperations;
import com.bridgelabz.userregistration.exception.CustomException;
import com.bridgelabz.userregistration.model.UserEntity;
import com.bridgelabz.userregistration.response.Response;



public class CandidateServiceImpl implements CandidateService{
	
	
	@Autowired
	private BCryptPasswordEncoder pwdencoder;
	
	@Autowired
	private JwtOperations jwt=new JwtOperations();
	@Autowired
	private Jms jms;
	@Autowired
	private ModelMapper modelmapper;

	@Autowired
	private CandidateRepository repository;
	@Override
	public ResponseDTO registerCandidate(UserDTO userDTO) throws InvalidDetailsException {
		Optional<UserEntity>isuserprsent=userrepo.isEmailExists(dto.getEmail());
		if(isuserprsent.isPresent()) {
			throw new CustomException("invalid details",null,400,"true");
		}
		else {
		UserEntity entity=modelmapper.map(dto, UserEntity.class);
		entity.setRegisteredDate(LocalDateTime.now());
		entity.setUpdatedDate(LocalDateTime.now());
		entity.setPassword(pwdencoder.encode(entity.getPassword()));
		userrepo.save(entity);
		log.info(entity.getFirstName()+" registered "+"date:"+entity.getRegisteredDate());
		String body="http://localhost:8080/verifyemail/"+jwt.jwtToken(entity.getUserid());
		System.out.println(body);
		jms.sendEmail(entity.getEmail(),"verification email",body);
		return new Response("regitration sucess",entity,201,"true");
	}
	}

	
