package com.bridgelabz.lms.service;

import java.time.LocalDateTime;
import java.time.LocalTime;
import java.util.List;
import java.util.Optional;

import org.modelmapper.ModelMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Service;

import com.bridgelabz.lms.dto.CandidatEOnBoardingDTO;
import com.bridgelabz.lms.dto.CandidateHiredDTO;
import com.bridgelabz.lms.exception.CandidateRegistrationException;
import com.bridgelabz.lms.model.Candidate;
import com.bridgelabz.lms.model.CandidateOnboardingDetails;
import com.bridgelabz.lms.repository.CandidateOnBoardingRepository;
import com.bridgelabz.lms.response.Response;
import com.bridgelabz.lms.util.Jms;
import com.bridgelabz.lms.util.JwtUtil;

@Service
public class CandidateOnBoardingServiceImpl implements CandidateOnBoardingService{

	
	@Autowired
	 private CandidateOnBoardingRepository candidaterepo;
	
	
	@Autowired
	private BCryptPasswordEncoder pwdencoder;
	
	@Autowired
	private JwtUtil jwt=new JwtUtil();
	@Autowired
	private Jms jms;
	
	@Autowired
	private ModelMapper modelmapper;

	@Override
	public Response getAllOnBoardingcandidates() {
		List<CandidateOnboardingDetails> isUserPresent = candidaterepo.findAll();
		return new Response("List of HiredCandidates are",isUserPresent,200,"true");
	}
	@Override
	public Response createUser(CandidateOnboardingDetails dto) {
		Optional<CandidateOnboardingDetails>isuserprsent=candidaterepo.isEmailExists(dto.getEmail());
		if(isuserprsent.isPresent()) {
			throw new CandidateRegistrationException("invalid details",null,400,"true");
		}
		else {
			CandidateOnboardingDetails user=modelmapper.map(dto, CandidateOnboardingDetails.class);
		//user.setJoindate(LocalTime.now());
//		user.setUpdateStamp(LocalDateTime.now());
		candidaterepo.save(user);
//		log.info(entity.getFirstName()+" registered "+"date:"+entity.getRegisteredDate());
		String body="http://localhost:8080/verifyemail/"+jwt.jwtToken(user.getId());
		System.out.println(body);
		jms.sendEmail(user.getEmail(),"verification email",body);
		return new Response("regitration sucess",user,201,"true");
	}
	
	}
	
	@Override
	public CandidateOnboardingDetails verify(String token) {
		long id=jwt.parseJWT(token);
		//log.debug(token);
		CandidateOnboardingDetails user=candidaterepo.isIdExists(id).orElseThrow(() -> new CandidateRegistrationException("user not exists",HttpStatus.OK,id,"false"));
		user.setVerifyEmail(true);
		candidaterepo.save(user);
		return user;
	}
	
	@Override
	public Response updateCandidate(Long id, CandidatEOnBoardingDTO dto) {
		Optional<Candidate> isUserPresent = candidaterepo.findById(dto.getEmail());
		if (isUserPresent.isPresent()) {
			isUserPresent.get().setFirstName(lmsCandidateDetail.getFirstName());
			isUserPresent.get().setMiddleName(lmsCandidateDetail.getMiddleName());
			isUserPresent.get().setLastName(lmsCandidateDetail.getLastName());
			isUserPresent.get().setEmail(lmsCandidateDetail.getEmail());
			isUserPresent.get().setMobileNum(lmsCandidateDetail.getMobileNum());
			isUserPresent.get().setHiredCity(lmsCandidateDetail.getHiredCity());
			isUserPresent.get().setHiredDate(lmsCandidateDetail.getHiredDate());
			isUserPresent.get().setDegree(lmsCandidateDetail.getDegree());
			isUserPresent.get().setHiredLab(lmsCandidateDetail.getHiredLab());
			isUserPresent.get().setAttitudeRemark(lmsCandidateDetail.getAttitudeRemark());
			isUserPresent.get().setCommunicationRemark(lmsCandidateDetail.getCommunicationRemark());
			isUserPresent.get().setKnowledgeRemark(lmsCandidateDetail.getKnowledgeRemark());
			isUserPresent.get().setOnboardingStatus(lmsCandidateDetail.getOnboardingStatus());
			//isUserPresent.get().setStatus(lmsCandidateDetail.getStatus());
			isUserPresent.get().setCreatorUser(lmsCandidateDetail.getCreatorUser());
			isUserPresent.get().setJoindate(lmsCandidateDetail.getJoindate());
			isUserPresent.get().setLocation(lmsCandidateDetail.getLocation());
			isUserPresent.get().setAggrPer(lmsCandidateDetail.getAggrPer());
			isUserPresent.get().setCurrentPincode(lmsCandidateDetail.getCurrentPincode());
			isUserPresent.get().setPermanentPincode(lmsCandidateDetail.getPermanentPincode());
			lmsDetailRepository.save(isUserPresent.get());
			return new ResponseDto("Candidate Data Successfully Updated", isUserPresent);
		} else {
			throw new LMSExceptions(400, "Candidate to be Updated Not found");
		}
	}

	}
	@Override
	public void deleteCandidateHiringById(Long id) {
		// TODO Auto-generated method stub
		
	}
}
