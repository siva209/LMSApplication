package com.bridgelabz.lms.service;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;

import org.modelmapper.ModelMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.bridgelabz.lms.dto.CandidateHiredDTO;
import com.bridgelabz.lms.exception.CandidateRegistrationException;
import com.bridgelabz.lms.model.Candidate;
import com.bridgelabz.lms.model.CandidateOnboardingDetails;
import com.bridgelabz.lms.repository.CandidateOnBoardingRepository;
import com.bridgelabz.lms.response.Response;

@Service
public class CandidateOnBoardingServiceImpl implements CandidateOnBoardingService{

	
	@Autowired
	 private CandidateOnBoardingRepository candidaterepo;
	
	@Autowired
	private ModelMapper modelmapper;

	@Override
	public Response getAllOnBoardingcandidates() {
		List<CandidateOnboardingDetails> isUserPresent = candidaterepo.findAll();
		return new Response("List of HiredCandidates are",isUserPresent,200,"true");
	}
	@Override
	public Response createUser(CandidateHiredDTO dto) {
		Optional<CandidateOnboardingDetails>isuserprsent=candidaterepo.isEmailExists(dto.getEmail());
		if(isuserprsent.isPresent()) {
			throw new CandidateRegistrationException("invalid details",null,400,"true");
		}
		else {
		Candidate user=modelmapper.map(dto, Candidate.class);
		user.setCreatorStamp(LocalDateTime.now());
		user.setUpdateStamp(LocalDateTime.now());
		candidaterepo.save()
//		log.info(entity.getFirstName()+" registered "+"date:"+entity.getRegisteredDate());
		String body="http://localhost:8080/verifyemail/"+jwt.jwtToken(user.getId());
		System.out.println(body);
		jms.sendEmail(user.getEmail(),"verification email",body);
		return new Response("regitration sucess",user,201,"true");
	}
	
	}
}
