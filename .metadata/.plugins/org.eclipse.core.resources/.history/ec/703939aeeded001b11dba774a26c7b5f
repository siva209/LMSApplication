package com.bridgelabz.lms.service;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;

import org.modelmapper.ModelMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Service;

import com.bridgelabz.lms.dto.ResponseDTO;
import com.bridgelabz.lms.dto.UpdateDto;
import com.bridgelabz.lms.dto.UserDTO;
import com.bridgelabz.lms.exception.CandidateRegistrationException;
import com.bridgelabz.lms.exception.InvalidDetailsException;
import com.bridgelabz.lms.model.Candidate;
import com.bridgelabz.lms.repository.CandidateRepository;
import com.bridgelabz.lms.response.Response;
import com.bridgelabz.lms.util.Jms;
import com.bridgelabz.lms.util.JwtUtil;




@Service
public class CandidateServiceImpl implements CandidateService{
	
	
	@Autowired
	private BCryptPasswordEncoder pwdencoder;
	
	@Autowired
	private JwtUtil jwt=new JwtUtil();
	@Autowired
	private Jms jms;
	@Autowired
	private ModelMapper modelmapper;

	@Autowired
	private CandidateRepository userrepo;
	@Override
	public Response registerCandidate(UserDTO dto) throws InvalidDetailsException {
		Optional<Candidate>isuserprsent=userrepo.isEmailExists(dto.getEmail());
		if(isuserprsent.isPresent()) {
			throw new CandidateRegistrationException("invalid details",null,400,"true");
		}
		else {
		Candidate user=modelmapper.map(dto, Candidate.class);
		user.setCreatorStamp(LocalDateTime.now());
		user.setUpdateStamp(LocalDateTime.now());
		userrepo.save(user);
//		log.info(entity.getFirstName()+" registered "+"date:"+entity.getRegisteredDate());
		String body="http://localhost:8080/verifyemail/"+jwt.jwtToken(user.getId());
		System.out.println(body);
		jms.sendEmail(user.getEmail(),"verification email",body);
		return new Response("regitration sucess",user,201,"true");
	}
	
	}
	@Override
	public Candidate verify(String token) {
		long id=jwt.parseJWT(token);
		//log.debug(token);
		Candidate user=userrepo.isIdExists(id).orElseThrow(() -> new CandidateRegistrationException("user not exists",HttpStatus.OK,id,"false"));
		user.setVerifyEmail(true);
		userrepo.save(user);
		return user;
	}
	@Override
	public Response getAllHiredcandidates() {
		List<Candidate> isUserPresent = userrepo.findAll();
		return new Response("List of HiredCandidates are",isUserPresent,200,"true");
	}
	public Candidate getUserById(String token) {
		long id=jwt.parseJWT(token);
		return userrepo.getUserById(id).orElseThrow(() -> new CandidateRegistrationException("user not exists",HttpStatus.OK,id,"false"));
	}
	@Override
	public Candidate getCandidateProfileById(Long id) {
		return userrepo.getCandidateProfileById(id).orElseThrow(() -> new CandidateRegistrationException("user not exists",HttpStatus.OK,id,"false"));
	}
//	@Override
//	public Candidate updateCandidate(Long id,UpdateDto dto) {
//		Candidate candidate = userrepo.findById(id)
//				.orElseThrow(() -> new CandidateRegistrationException("user not update",HttpStatus.OK,id,"false"));
//		candidate = new Candidate(id, dto);
//		userrepo.save(candidate);
//		return this.getCandidateProfileById(id);
//	}
	@Override
	public Response updateCandidate(String token, UpdateDto dto) {
		//int Id = tokenutil.decodeToken(token);
				Optional<Candidate> isUserPresent = userrepo.findById(dto.getEmail());
				if (isUserPresent.isPresent()) {
					isUserPresent.get().setFirstName(dto.getFirstName()
					isUserPresent.get().setMiddleName(dto.getMiddleName());
					isUserPresent.get().setLastName(dto.getLastName());
					isUserPresent.get().setEmail(dto.getEmail());
					isUserPresent.get().setMobileNum(dto.getMobileNum());
					isUserPresent.get().setHiredcity(dto.getHiredcity());
					isUserPresent.get().setParentName(dto.getParentName());
					isUserPresent.get().setParentMobile(lmsCandidateHiring.getParentMobile());
					isUserPresent.get().setTemporaryAddress(lmsCandidateHiring.getTemporaryAddress());
					isUserPresent.get().setOccupation(lmsCandidateHiring.getOccupation());
					isUserPresent.get().setParentAnnualSalary(lmsCandidateHiring.getParentAnnualSalary());
					isUserPresent.get().setPermanentAddress(lmsCandidateHiring.getPermanentAddress());
					isUserPresent.get().setProfileImage(lmsCandidateHiring.getProfileImage());
					isUserPresent.get().setFolderId(lmsCandidateHiring.getFolderId());
					//isUserPresent.get().setStatus(lmsCandidateHiring.getStatus());
					isUserPresent.get().setUpdateStamp(LocalDateTime.now());
					System.out.println(isUserPresent);
					lmsCandidateHiringRepository.save(isUserPresent.get());
					return new ResponseDto("Candidate Hiring Data Successfully Updated", isUserPresent);
				} else {
					throw new LMSExceptions(400, "Candidate to be Updated Not found");
				}
			}
	}
		
	}
	



	
